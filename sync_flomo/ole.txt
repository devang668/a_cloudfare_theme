// Cloudflare Worker Code - CORRECTED VERSION

const TARGET_HOST = 'dav.jianguoyun.com';

export default {
  async fetch(request, env, ctx) {
    // Handle CORS preflight requests (OPTIONS method)
    if (request.method === 'OPTIONS') {
      return handleOptions(request);
    }

    const url = new URL(request.url);
    const targetPath = url.pathname;
    const targetUrl = `https://${TARGET_HOST}${targetPath}`;

    const newRequest = new Request(targetUrl, {
      method: request.method,
      headers: {
        'Authorization': request.headers.get('Authorization'),
        'Content-Type': request.headers.get('Content-Type') || 'application/json',
      },
      body: request.method === 'PUT' ? await request.blob() : undefined,
    });

    const response = await fetch(newRequest);

    const newResponse = new Response(response.body, response);
    
    // Set CORS headers on the actual response
    newResponse.headers.set('Access-Control-Allow-Origin', '*');
    newResponse.headers.set('Access-Control-Allow-Methods', 'GET, PUT, OPTIONS');
    newResponse.headers.set('Access-Control-Allow-Headers', 'Authorization, Content-Type');

    return newResponse;
  },
};

function handleOptions(request) {
  // Respond to the preflight request with the correct headers
  const headers = {
    // CORRECTED HEADER: 'Access-Control-Allow-Origin' is the proper name
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, PUT, OPTIONS',
    'Access-Control-Allow-Headers': 'Authorization, Content-Type',
  };
  return new Response(null, { headers });
} 还有 <!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebDAV Notes (Cloudflare Sync)</title>
    <style>
        :root {
            --bg-color: #f8f9fa; --card-color: #ffffff; --text-color: #212529; --primary-color: #007bff;
            --border-color: #dee2e6; --shadow: 0 4px 12px rgba(0,0,0,0.08);
            --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }
        body { font-family: var(--font-family); background-color: var(--bg-color); color: var(--text-color); margin: 0; padding: 20px; display: flex; justify-content: center; }
        .app-container { width: 100%; max-width: 700px; display: flex; flex-direction: column; gap: 20px; }
        .card { background: var(--card-color); border-radius: 12px; box-shadow: var(--shadow); padding: 25px; }
        h2 { margin-top: 0; margin-bottom: 20px; border-bottom: 1px solid var(--border-color); padding-bottom: 10px; }
        textarea { width: 100%; min-height: 120px; padding: 12px; border: 1px solid var(--border-color); border-radius: 8px; font-size: 1em; line-height: 1.6; resize: vertical; box-sizing: border-box; }
        .actions { display: flex; justify-content: flex-end; margin-top: 15px; gap: 10px; }
        button { background: var(--primary-color); color: white; border: none; padding: 10px 20px; border-radius: 8px; font-size: 1em; font-weight: 500; cursor: pointer; transition: background-color 0.2s; }
        button:hover { background-color: #0056b3; }
        button.secondary { background-color: #6c757d; }
        button.secondary:hover { background-color: #5a6268; }
        .note-card { border: 1px solid var(--border-color); border-radius: 8px; padding: 15px; margin-bottom: 15px; white-space: pre-wrap; word-wrap: break-word; }
        .note-card .meta { font-size: 0.8em; color: #6c757d; margin-top: 12px; text-align: right; }
        .setting-item { margin-bottom: 15px; }
        .setting-item label { display: block; margin-bottom: 5px; font-weight: 500; }
        .setting-item input { width: 100%; padding: 10px; border: 1px solid var(--border-color); border-radius: 8px; box-sizing: border-box; }
        #sync-status { margin-top: 15px; padding: 10px; background-color: #f1f3f5; border-radius: 8px; text-align: center; font-weight: 500; }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="card">
            <h2>New Note</h2>
            <textarea id="note-input" placeholder="Write your thoughts here..."></textarea>
            <div class="actions">
                <button id="save-note-btn">Save Note</button>
            </div>
        </div>
        <div class="card">
            <h2>My Notes</h2>
            <div id="notes-list"></div>
        </div>
        <div class="card">
            <h2>Settings & Data</h2>
            <div class="data-actions" style="margin-bottom: 20px;">
                <label>Data Management</label>
                <div class="actions" style="justify-content: flex-start;">
                    <button id="import-btn" class="secondary">Import</button>
                    <button id="export-btn" class="secondary">Export</button>
                </div>
            </div>
            <div class="webdav-settings">
                <label>坚果云 (Jianguoyun) WebDAV Sync</label>
                <div class="setting-item">
                    <input type="text" id="webdav-worker-url" placeholder="https://syncflomo.devanglic105.workers.dev">
                </div>
                <div class="setting-item">
                    <input type="text" id="webdav-user" placeholder="坚果云账户 (Account)">
                </div>
                <div class="setting-item">
                    <input type="password" id="webdav-pass" placeholder="坚果云应用密码 (App Password)">
                </div>
                 <div class="actions" style="justify-content: flex-start;">
                    <button id="save-settings-btn">Save Settings</button>
                    <button id="sync-webdav-btn">Sync with WebDAV</button>
                </div>
                <div id="sync-status">Ready to sync.</div>
            </div>
        </div>
    </div>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- DOM Elements ---
    const noteInput = document.getElementById('note-input');
    const saveNoteBtn = document.getElementById('save-note-btn');
    const notesList = document.getElementById('notes-list');
    const importBtn = document.getElementById('import-btn');
    const exportBtn = document.getElementById('export-btn');
    const workerUrlInput = document.getElementById('webdav-worker-url');
    const userInput = document.getElementById('webdav-user');
    const passInput = document.getElementById('webdav-pass');
    const saveSettingsBtn = document.getElementById('save-settings-btn');
    const syncBtn = document.getElementById('sync-webdav-btn');
    const syncStatus = document.getElementById('sync-status');

    // --- State Variables ---
    let notes = [];
    let webdavSettings = {};

    const renderNotes = () => { /* ... (same as before) ... */ notesList.innerHTML = ''; notes.sort((a, b) => b.timestamp - a.timestamp).forEach(note => { const card = document.createElement('div'); card.className = 'note-card'; const content = document.createElement('div'); content.textContent = note.text; const meta = document.createElement('div'); meta.className = 'meta'; meta.textContent = new Date(note.timestamp).toLocaleString(); card.appendChild(content); card.appendChild(meta); notesList.appendChild(card); }); };
    const saveNotesToLocal = () => localStorage.setItem('webdavNotes', JSON.stringify(notes));
    const loadNotesFromLocal = () => { notes = JSON.parse(localStorage.getItem('webdavNotes') || '[]'); renderNotes(); };
    const saveSettingsToLocal = () => localStorage.setItem('webdavSettings', JSON.stringify(webdavSettings));
    const loadSettingsFromLocal = () => {
        webdavSettings = JSON.parse(localStorage.getItem('webdavSettings') || '{}');
        workerUrlInput.value = webdavSettings.workerUrl || '';
        userInput.value = webdavSettings.user || '2551502388@qq.com';
        passInput.value = webdavSettings.pass || 'a9cvu8wn5uwdsxrw';
    };
    
    saveNoteBtn.addEventListener('click', () => { const text = noteInput.value.trim(); if (text) { notes.push({ text, timestamp: Date.now() }); noteInput.value = ''; saveNotesToLocal(); renderNotes(); } });
    exportBtn.addEventListener('click', () => { if (notes.length === 0) return alert('No notes to export.'); const blob = new Blob([JSON.stringify(notes, null, 2)], { type: 'application/json' }); const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = `notes_export_${Date.now()}.json`; a.click(); URL.revokeObjectURL(a.href); });
    importBtn.addEventListener('click', async () => { try { const [fileHandle] = await window.showOpenFilePicker({ types: [{ description: 'JSON Files', accept: { 'application/json': ['.json'] } }], }); const file = await fileHandle.getFile(); const content = await file.text(); const importedNotes = JSON.parse(content); if (Array.isArray(importedNotes)) { const existingTimestamps = new Set(notes.map(n => n.timestamp)); const newNotes = importedNotes.filter(n => !existingTimestamps.has(n.timestamp)); if (newNotes.length === 0) return alert('No new notes to import.'); notes = notes.concat(newNotes); saveNotesToLocal(); renderNotes(); alert(`Successfully appended ${newNotes.length} new notes.`); } } catch (err) { console.error('Import failed:', err); } });
    
    saveSettingsBtn.addEventListener('click', () => {
        webdavSettings = {
            workerUrl: workerUrlInput.value.trim(),
            user: userInput.value.trim(),
            pass: passInput.value,
        };
        saveSettingsToLocal();
        alert('Settings saved!');
    });

    syncBtn.addEventListener('click', async () => {
        if (!webdavSettings.workerUrl || !webdavSettings.user || !webdavSettings.pass) {
            return alert('Please save your Worker URL and WebDAV settings first.');
        }
        syncStatus.textContent = 'Syncing...';
        // The path now starts with `/dav/` because the worker handles the hostname
        const remoteFilePath = `${webdavSettings.workerUrl}/dav/notes.json`;
        const authHeader = 'Basic ' + btoa(`${webdavSettings.user}:${webdavSettings.pass}`);
        try {
            let remoteNotes = [];
            const getResponse = await fetch(remoteFilePath, {
                method: 'GET',
                headers: { 'Authorization': authHeader }
            });
            if (getResponse.ok) {
                remoteNotes = await getResponse.json();
            } else if (getResponse.status !== 404) {
                throw new Error(`Failed to download: ${getResponse.statusText}`);
            }

            const allNotes = [...notes, ...remoteNotes];
            const mergedNotesMap = new Map(allNotes.map(note => [note.timestamp, note]));
            const finalNotes = Array.from(mergedNotesMap.values()).sort((a, b) => b.timestamp - a.timestamp);
            
            const putResponse = await fetch(remoteFilePath, {
                method: 'PUT',
                headers: { 'Authorization': authHeader, 'Content-Type': 'application/json' },
                body: JSON.stringify(finalNotes, null, 2)
            });

            if (!putResponse.ok) {
                throw new Error(`Failed to upload: ${putResponse.statusText}`);
            }

            notes = finalNotes;
            saveNotesToLocal();
            renderNotes();
            syncStatus.textContent = `Sync successful at ${new Date().toLocaleTimeString()}`;
        } catch (error) {
            console.error('WebDAV Sync Error:', error);
            syncStatus.textContent = `Error: ${error.message}. Check Worker status or credentials.`;
        }
    });

    const init = () => { loadNotesFromLocal(); loadSettingsFromLocal(); };
    init();
});
</script>
</body>
</html>  

但是同步的时候失败了 似乎问题在cloudfare  worker上面，报错是 
sync_flomo/:126   
GET https://syncflomo.devanglic105.workers.dev/dav/notes.json 520
sync_flomo/:155  
WebDAV Sync Error: Error: Failed to download:     at HTMLButtonElement.<anonymous> (sync_flomo/:133:23)
(anonymous)@sync_flomo/:155
﻿